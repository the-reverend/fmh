#include "stdafx.h"

#include "CommandLineProcessor.h"

#include <iostream>
#include <fstream>
#include <string>

#ifndef FIRST_BUILD
#include "fmh_manifest.h"
#include "fmh_manifest.uuid.h"
#else
#define FMH_MANIFEST_DATE "01/01/1970 00:00:00"
#define FMH_MANIFEST_VERSION "0000000000"
#endif

class CommandLineParser
{
public:
	CommandLineParser()
			: Prefix( "FOSSIL_" )
			, InFile( "" )
			, Help( false )
	{
		parser.RegisterConsumer( *this );
		parser.RegisterCallback( "infile", &CommandLineParser::setInfile );
		parser.RegisterCallback( "prefix", &CommandLineParser::setPrefix );
		parser.RegisterCallback( "help", &CommandLineParser::setHelp );
		parser.RegisterCallback( "h", &CommandLineParser::setHelp );
		parser.RegisterCallback( "?", &CommandLineParser::setHelp );
	}

	void setInfile( const std::string& argument )
	{
		InFile = argument;
	}

	void setPrefix( const std::string& argument )
	{
		Prefix = argument;
	}

	void setHelp( const std::string& argument = "" )
	{
		Help = true;
	}

	std::string Prefix;
	std::string InFile;
	bool Help;
	RPW::Core::CommandLineProcessor<CommandLineParser> parser;
};


// argv should contain the path to the manifest file or the manifest.uuid file
int main(int argc, char* argv[])
{
    std::string self(argv[0]);
    std::string app(self.substr(self.find_last_of("/\\")+1));

	std::cout << "/// @version " << app << " [" << FMH_MANIFEST_VERSION << "] " << FMH_MANIFEST_DATE << std::endl;

	try
	{
		CommandLineParser clp;
		clp.parser.Process( argc, argv, 1 );

		if ( clp.Help )
		{
			std::cout << "// usage: " << app << " -infile filepath [-prefix defineprefix]" << std::endl;
			return 0;
		}

		if ( clp.InFile.length() == 0 )
		{
			std::cout << "#error no infile defined" << std::endl;
			return 1;
		}

		std::cout << "/// @note generated by " << app
			<< " -infile \"" << clp.InFile << "\" -prefix \"" << clp.Prefix << '"' << std::endl;
		std::cout << std::endl;

		bool isUuidFile = clp.InFile.find(".uuid") != std::string::npos;

		std::ifstream infile(clp.InFile.c_str());
		std::string line;

		std::string info;
		if (!infile)
		{
			std::cout << "#error " << app << " :: unable to open file \"" << clp.InFile << "\"" << std::endl;
			return 2;
		}

		if (isUuidFile)
		{
			if (!infile.eof())
			{
				getline(infile, info);
			}
			infile.close();

			if (info.length() == 0)
			{
				std::cout << "#error " << app << " :: missing uuid in \"" << clp.InFile << "\"" << std::endl;
				return 3;
			}
		}
		else
		{
			while (!infile.eof())
			{
				getline(infile, line);

				if (line.length() > 0 && line[0] == 'D')
				{
					info = line.substr(2);
					std::string::size_type pp = info.find_first_of('T');
					if (pp != std::string::npos)
					{
						info = info.replace(pp, 1, " ");
					}
					break;
				}
			}
			infile.close();

			if (info.length() == 0)
			{
				std::cout << "#error " << app << " :: missing date stamp in \"" << clp.InFile << "\"" << std::endl;
				return 4;
			}
		}

		std::cout << "#pragma once" << std::endl;
		std::cout << std::endl;

		if (isUuidFile)
		{
			std::cout << "#ifndef " << clp.Prefix << "MANIFEST_UUID" << std::endl;
			std::cout << "#define " << clp.Prefix << "MANIFEST_UUID \"" << info << "\"" << std::endl;
			std::cout << "#endif" << std::endl;
			std::cout << std::endl;

			std::cout << "#ifndef " << clp.Prefix << "MANIFEST_VERSION" << std::endl;
			std::cout << "#define " << clp.Prefix << "MANIFEST_VERSION \"" << info.substr(0, 10) << "\"" << std::endl;
			std::cout << "#endif" << std::endl;
		}
		else
		{
			std::cout << "#ifndef " << clp.Prefix << "MANIFEST_DATE" << std::endl;
			std::cout << "#define " << clp.Prefix << "MANIFEST_DATE \"" << info << "\"" << std::endl;
			std::cout << "#endif" << std::endl;
		}
	}
	catch ( const std::exception& e )
	{
		std::cout << "// " << e.what();
		return 5;
	}
	catch ( ... )
	{
		std::cout << "// unknown system exception";
		return 6;
	}
 
	return 0;
}
